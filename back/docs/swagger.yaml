definitions:
  account.AccountCreateDto:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  account.AccountUpdateDto:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  constants.Provider:
    enum:
    - google
    - discord
    - github
    type: string
    x-enum-varnames:
    - PROVIDER_GOOGLE
    - PROVIDER_DISCORD
    - PROVIDER_GITHUB
  event.EventCreateDto:
    properties:
      duration:
        maximum: 30240
        minimum: 15
        type: integer
      ends_at:
        type: string
      name:
        type: string
      starts_at:
        type: string
    required:
    - duration
    - ends_at
    - name
    - starts_at
    type: object
  helpers.ApiError:
    properties:
      code:
        type: string
      error:
        type: boolean
      message:
        type: string
    type: object
  model.Account:
    properties:
      createdAt:
        type: string
      email:
        type: string
      events:
        items:
          $ref: '#/definitions/model.AccountEvent'
        type: array
      id:
        type: string
      providers:
        items:
          $ref: '#/definitions/model.AccountProvider'
        type: array
      userName:
        type: string
    type: object
  model.AccountEvent:
    properties:
      account:
        allOf:
        - $ref: '#/definitions/model.Account'
        description: Relations
      createdAt:
        type: string
      event:
        $ref: '#/definitions/model.Event'
    type: object
  model.AccountProvider:
    properties:
      provider:
        $ref: '#/definitions/constants.Provider'
    type: object
  model.Event:
    properties:
      createdAt:
        type: string
      duration:
        description: In minutes
        type: integer
      endsAt:
        type: string
      id:
        type: string
      name:
        type: string
      owner:
        allOf:
        - $ref: '#/definitions/model.Account'
        description: Relations
      startsAt:
        type: string
    type: object
  signin.SigninDto:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  signin.TokenResponseDto:
    properties:
      access_token:
        type: string
    type: object
info:
  contact:
    email: contact@zide.fr
  description: SlotFinder API Doc
  title: SlotFinder API
  version: 1.0b
paths:
  /v1/account:
    patch:
      consumes:
      - application/json
      description: Update own account
      parameters:
      - description: Account parameters
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/account.AccountUpdateDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Account'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ApiError'
      security:
      - AccessTokenCookie: []
      summary: Update my account
      tags:
      - Account
    post:
      consumes:
      - application/json
      description: Create a new account with the provided parameters.
      parameters:
      - description: Account parameters
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/account.AccountCreateDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ApiError'
      summary: Create an account
      tags:
      - Account
  /v1/account/me:
    get:
      consumes:
      - application/json
      description: Get the account information of the current user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Account'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ApiError'
      security:
      - AccessTokenCookie: []
      summary: Get My Account
      tags:
      - Account
  /v1/auth/{provider}/url:
    get:
      parameters:
      - description: OAuth provider
        enum:
        - google
        - github
        - discord
        in: path
        name: provider
        required: true
        type: string
      - description: URL to redirect after OAuth authentication
        in: query
        name: redirectUrl
        required: true
        type: string
      responses:
        "200":
          description: OAuth URL
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ApiError'
      summary: Get redirect URL for OAuth provider
      tags:
      - Authentication
  /v1/auth/providers/url:
    get:
      parameters:
      - description: URL to redirect after OAuth authentication
        in: query
        name: redirectUrl
        required: true
        type: string
      responses:
        "200":
          description: OAuth URL
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ApiError'
      summary: Get all redirect URLs for each OAuth provider
      tags:
      - Authentication
  /v1/auth/signin:
    post:
      consumes:
      - application/json
      description: Sign in with email and password
      parameters:
      - description: Sign in parameters
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/signin.SigninDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/signin.TokenResponseDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ApiError'
      summary: Sign in
      tags:
      - Authentication
  /v1/auth/status:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ApiError'
      summary: Status Check
      tags:
      - Authentication
  /v1/event:
    post:
      consumes:
      - application/json
      parameters:
      - description: Event parameters
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/event.EventCreateDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Event'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ApiError'
      security:
      - BearerAuth: []
      summary: Create an event
      tags:
      - Event
securityDefinitions:
  AccessTokenCookie:
    description: Enter your bearer token in the format **Bearer &lt;token&gt;**
    in: cookie
    name: access_token
    type: apiKey
swagger: "2.0"
